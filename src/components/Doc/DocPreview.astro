<dialog
    id="preview-dialog"
    class:list={[
        "absolute -top-16 right-0 -bottom-[4.125rem] left-auto block w-full max-w-[clamp(500px,calc(100%-52rem),53rem)] h-auto pt-16 bg-transparent shadow-[0_0_3.5rem_rgba(0,0,0,0.05)] z-50 transition-all",
        "group opacity-0 pointer-events-none",
        "open:opacity-100 open:pointer-events-auto",
    ]}
>
    <form method="dialog" class="hidden min-[500px]:block xl:hidden">
        <button class="fixed inset-0 bg-[#0a0c10]/50 focus:outline-none" aria-label="Close"></button>
    </form>

    <div
        class="fixed top-0 w-full max-w-[inherit] md:max-w-[max(min(calc(100%-52rem-300px),53rem),500px)] h-16 px-px bg-base-50 z-10 scale-x-95 group-open:scale-x-100 origin-top-right transition-transform"
    >
        <div
            class="flex items-center gap-2 h-full px-3 text-base-content bg-base-200 rounded-b-box focus:outline-none overflow-hidden overflow-x-auto"
            tabindex="0"
        >
            <form method="dialog">
                <button class="btn btn-ghost min-h-10 h-10 px-0 bg-base-100 aspect-square">
                    <svg
                        width="16"
                        height="16"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"><path d="M18 6 6 18"></path><path d="m6 6 12 12"></path></svg
                    >
                </button>
            </form>

            <div class="flex gap-px">
                <button
                    id="btn-back"
                    type="button"
                    class:list={[
                        "group btn btn-ghost !flex min-h-10 h-10 px-0 bg-base-100 aspect-square rounded-r-sm select-none",
                        "disabled:bg-base-100/60 disabled:text-current",
                        "[@media(hover:hover)]:tooltip tooltip-bottom before:left-0 before:translate-x-0 before:mt-2 after:mt-2",
                    ]}
                    disabled
                >
                    <svg
                        class="group-disabled:opacity-20"
                        width="18"
                        height="18"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"><path d="m12 19-7-7 7-7"></path><path d="M22 12H6"></path></svg
                    >
                </button>

                <button
                    id="btn-forward"
                    type="button"
                    class:list={[
                        "group btn btn-ghost !flex min-h-10 h-10 px-0 bg-base-100 aspect-square rounded-l-sm select-none",
                        "disabled:bg-base-100/60 disabled:text-current",
                        "[@media(hover:hover)]:tooltip tooltip-bottom before:left-0 before:translate-x-0 before:mt-2 after:mt-2",
                    ]}
                    disabled
                >
                    <svg
                        class="group-disabled:opacity-20"
                        width="18"
                        height="18"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"><path d="M2 12h16"></path><path d="m12 5 7 7-7 7"></path></svg
                    >
                </button>
            </div>

            <div class="flex gap-2 ml-auto">
                <div class="flex gap-px">
                    <a
                        data-open-link
                        class="btn btn-ghost bg-base-100 min-h-10 h-10 px-3.5 font-medium rounded-r-sm [&:not(:hover)]:text-base-content"
                        href="#"
                    >
                        Open
                    </a>

                    <a
                        data-open-link
                        class="btn btn-ghost bg-base-100 min-h-10 h-10 px-0 sm:pl-3.5 sm:pr-3 aspect-square sm:aspect-auto font-medium rounded-l-sm [&:not(:hover)]:text-base-content"
                        href="#"
                        target="_blank"
                    >
                        <span class="hidden sm:inline">In new tab</span>
                        <svg
                            class="shrink-0"
                            width="16"
                            height="16"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                        >
                            <path d="M15 3h6v6"></path>
                            <path d="M10 14 21 3"></path>
                            <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path>
                        </svg>
                    </a>
                </div>

                <button
                    class="swap btn btn-ghost text-center min-h-10 h-10 px-0 bg-base-100 aspect-square"
                    onclick="
                        navigator.clipboard.writeText(this.parentElement.querySelector('[href]'));
                        this.classList.add('swap-active');
                        setTimeout(() => this.classList.remove('swap-active'), 500);
                    "
                    aria-label="Copy link to clipboard"
                >
                    <span
                        class="swap-off flex items-center justify-center h-[inherit] aspect-square tooltip tooltip-bottom before:left-auto before:right-0 before:translate-x-0 before:mt-2 after:mt-2 [.btn:focus_&]:before:opacity-0 [.btn:focus_&]:after:opacity-0"
                        data-tip="Copy link"
                        aria-hidden="true"
                    >
                        <img class="opacity-75 [.btn:hover_&]:opacity-100 transition-opacity" src="/copy.png" width="22" height="22" aria-hidden="true" />
                    </span>

                    <span
                        class="swap-on flex items-center justify-center h-[inherit] aspect-square tooltip tooltip-bottom tooltip-open before:left-auto before:right-0 before:translate-x-0 before:mt-2 after:mt-2 pointer-events-none"
                        data-tip="Copied!"
                        aria-hidden="true"
                    >
                        <img src="/copied.png" width="22" height="22" aria-hidden="true" />
                    </span>
                </button>
            </div>
        </div>
    </div>

    <div id="preview-aside" class="sticky top-16 h-[calc(100dvh-4rem)] p-px bg-base-50 scale-x-95 group-open:scale-x-100 origin-top-right transition-transform">
        <div class="h-full bg-base-100/60 rounded-box overflow-clip">
            <div
                id="preview-content"
                class="sticky top-16 max-h-full p-4 md:p-8 overflow-y-auto overscroll-y-contain lg:overscroll-auto text-base-content break-words scrollbar-thin scroll-pt-8 scale-x-105 group-open:scale-x-100 origin-top-left transition-[transform,opacity]"
            ></div>
        </div>
    </div>

    <div class="absolute inset-0 top-16 pointer-events-none scale-x-95 group-open:scale-x-100 origin-top-right transition-transform" aria-hidden="true">
        <div class="sticky top-[inherit] left-0 w-full border-t bg-corner-radius pointer-events-none"></div>
    </div>
</dialog>

<script>
    declare global {
        interface Window {
            previewContentCache: Record<string, HTMLElement>;
        }
    }

    document.addEventListener("astro:page-load", () => {
        window["previewContentCache"] ??= {};
        const history: string[] = [];
        let curHistoryIndex = -1;

        const previewDialog = document.querySelector<HTMLDialogElement>("#preview-dialog")!;
        const previewContent = document.getElementById("preview-content")!;
        const backBtn = document.querySelector<HTMLButtonElement>("#btn-back");
        const forwardBtn = document.querySelector<HTMLButtonElement>("#btn-forward");
        const openLinks = document.querySelectorAll<HTMLAnchorElement>("[data-open-link]")!;

        previewDialog.addEventListener("onSetDocPreview", async (e) => {
            const event = e as CustomEvent<string>;
            const previewContent = document.getElementById("preview-content")!;

            updateUrl(event.detail);

            if (history && history[curHistoryIndex] == event.detail) {
                previewContent.scrollTo(0, 0);
                return;
            }

            openLinks.forEach((a) => (a.href = ""));

            const html = await replaceContent(event.detail);
            if (!html) return;

            registerLinks();

            openLinks.forEach((a) => (a.href = `/docs/api${event.detail}`));

            if (window.location.hash) scrollToAnchor(previewContent.querySelector(`[href="${window.location.hash}"]`)!);

            pushToHistory({
                path: event.detail,
                html,
            });
        });

        previewDialog.addEventListener("close", () => {
            const newUrl = new URL(window.location.toString());
            newUrl.searchParams.delete("preview");
            newUrl.hash = "";
            window.history.replaceState(null, "", newUrl);

            setTimeout(
                () =>
                    requestAnimationFrame(() => {
                        curHistoryIndex = -1;
                        setHtml(window.previewContentCache[history[0]]);
                        history.splice(0, Infinity);
                        updateNavButtons();
                    }),
                150,
            );
        });

        backBtn?.addEventListener("click", () => navigate(-1), { capture: true, passive: true });
        forwardBtn?.addEventListener("click", () => navigate(1), { capture: true, passive: true });

        // data-type-link(s) and anchors
        const registerLinks = () => {
            const linkButtons = document.querySelectorAll<HTMLSpanElement>("[data-type-link]");
            const anchors = previewDialog.querySelectorAll<HTMLAnchorElement>("[href^='#']");

            linkButtons.forEach((button) => {
                if (button.dataset.checking === "true") return;
                button.dataset.checking = "true";

                button.addEventListener("click", () => {
                    const linkType = button.dataset.linkType;
                    const previewDialog = document.querySelector<HTMLDialogElement>("#preview-dialog")!;

                    if (isBottomed()) previewDialog?.scrollIntoView(false);

                    if (linkType && previewDialog) {
                        previewDialog.dispatchEvent(
                            new CustomEvent("onSetDocPreview", {
                                detail: linkType,
                            }),
                        );

                        previewDialog.show();
                    }
                });
            });

            anchors.forEach((a) => {
                a.addEventListener(
                    "click",
                    (e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        scrollToAnchor(a);
                        window.history.replaceState(null, "", a.href);
                    },
                    true,
                );
            });
        };

        registerLinks();

        const replaceContent = async (path: string) => {
            let content: HTMLElement | null = window.previewContentCache[path] ?? null;
            let loaded = false;
            let loadedIn = performance.now();

            const showLoader = () => {
                if (loaded || loadedIn <= 100) return;
                previewContent.innerHTML = `<div class="loading loading-dots"></div>`;
                previewContent.classList.remove("opacity-0", "!transition-transform");
            };

            if (!content) {
                previewContent.classList.add("opacity-0", "!transition-transform");
                if (curHistoryIndex > -1) {
                    setTimeout(() => showLoader(), 100);
                } else {
                    showLoader();
                }

                const page = await fetch(`/api/v2/doc${path}`);
                const html = await page.text();
                const parser = new DOMParser();
                const typeDom = parser.parseFromString(html, "text/html");
                content = typeDom.querySelector("article");
                loaded = true;
                loadedIn = performance.now() - loadedIn;

                if (content) await setHtml(content, loadedIn > 100);
            } else {
                setHtml(content);
            }

            return content;
        };

        const setHtml = async (content: HTMLElement, transition = curHistoryIndex > -1): Promise<void> => {
            if (transition) previewContent.classList.add("opacity-0", "!transition-transform");

            previewContent.replaceChildren(content);

            const fadeIn = () => {
                previewContent.scrollTo({ top: 0, behavior: "instant" });
                previewContent.classList.remove("opacity-0", "!transition-transform");
            };

            await new Promise<void>((resolve) => {
                if (transition) {
                    setTimeout(() => {
                        fadeIn();
                        resolve();
                    }, 100);
                } else {
                    fadeIn();
                    resolve();
                }
            });
        };

        const scrollToAnchor = (a: HTMLAnchorElement) => {
            if (!a) return;

            previewContent?.scrollTo({ top: a.offsetTop - 35 });
            if (isBottomed()) previewDialog?.scrollIntoView(false);
        };

        const isBottomed = () => document.querySelector("#preview-aside")!.getBoundingClientRect().top < 0;

        const pushToHistory = ({ path, html }: { path: string; html: HTMLElement }) => {
            history.splice(++curHistoryIndex, Infinity);
            history.push({ path, html }.path);
            window.previewContentCache[path] = html;
            updateNavButtons();
        };

        const navigate = (dir: 1 | -1) => {
            const newHistoryIndex = Math.min(Math.max(0, curHistoryIndex + dir), history.length - 1);

            if (newHistoryIndex == curHistoryIndex) return;

            const path = history[(curHistoryIndex = newHistoryIndex)];

            setHtml(window.previewContentCache[path]);
            updateUrl(path);
            updateNavButtons();

            openLinks.forEach((a) => (a.href = `/docs/api${path}`));
        };

        const updateNavButtons = () => {
            const back = history[curHistoryIndex - 1];
            backBtn?.toggleAttribute("disabled", !back);
            if (back && backBtn) backBtn.dataset.tip = back.replace(/^\//, "");

            const forward = history[curHistoryIndex + 1];
            forwardBtn?.toggleAttribute("disabled", !forward);
            if (forward && forwardBtn) forwardBtn.dataset.tip = forward.replace(/^\//, "");
        };

        const updateUrl = (path: string) => {
            const newUrl = new URL(window.location.toString());
            newUrl.searchParams.set("preview", path.replace(/^\//, ""));
            newUrl.hash = window.location.hash;
            window.history.replaceState({ preview: path }, "", newUrl);
        };

        if (location.search.includes("preview")) {
            previewDialog.dispatchEvent(
                new CustomEvent("onSetDocPreview", {
                    detail: "/" + new URL(window.location.toString()).searchParams.get("preview"),
                }),
            );

            previewDialog.show();
        }
    });
</script>
