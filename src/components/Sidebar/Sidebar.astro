---
import type { MarkdownHeading } from "astro";
import Footer from "../Footer/Footer.astro";
import { getBlogEntries, getBookEntries, getDocEntries, getGuidesEntries } from "./entries";
import SidebarEntries from "./SidebarEntries.astro";
import SidebarContentNav from "./SidebarContentNav.astro";

export type LinkListEntry = {
    title: string;
    description: string;
    link: string;
    folder?: string;
};

export type SidebarEntry = {
    linkList: LinkListEntry[];
    folder: string;
};

export type SidebarProps = {
    sidebarMode?: "guides" | "reference" | "blog" | "books";
    headings?: MarkdownHeading[];
};

type Props = SidebarProps;

const { sidebarMode, headings } = Astro.props;
let renderList: SidebarEntry[] = [];

if (sidebarMode === "guides") {
    renderList = await getGuidesEntries();
} else if (sidebarMode === "reference") {
    renderList = await getDocEntries();
} else if (sidebarMode === "blog") {
    renderList = await getBlogEntries();
} else if (sidebarMode === "books") {
    renderList = await getBookEntries();
}
---

<div id="drawer" class="drawer z-20 h-full md:drawer-open md:border-r border-base-content/5">
    <input id="sidebar" type="checkbox" class="drawer-toggle" />

    <div class="drawer-content w-full">
        <header class="z-30 flex min-h-16 w-full">
            <SidebarContentNav headings={headings} />
        </header>

        <main class="relative flex w-full flex-col md:flex-row md:pt-4 md:pl-4">
            <div class="w-full">
                <slot name="ad" />

                <slot />
            </div>
        </main>

        <Footer />
    </div>

    <SidebarEntries sidebarMode={sidebarMode} />

    <div class="max-md:hidden fixed bottom-0 left-72 right-0 bg-corner-radius -scale-y-100 pointer-events-none border-t z-40"></div>
</div>

<script>
    const isMac = navigator.userAgent.includes("Mac");
    const searchBtn = document.querySelector("#search-btn");

    if (isMac && searchBtn) {
        searchBtn.textContent = "âŒ˜ + K";
    }

    window.addEventListener("keydown", (e) => {
        if (e.ctrlKey && e.key === "k") {
            e.preventDefault();

            document.querySelector<HTMLDialogElement>("#search-modal")?.showModal();
        }
    });
</script>

<script>
    import type { TransitionBeforeSwapEvent } from "astro:transitions/client";

    const getSidebar = (doc = document) => doc.querySelector<HTMLDivElement>("#drawer .drawer-scrollable");

    const updateActiveLinks = () => {
        const pathname = new URL(location.href).pathname.replace(/\/$/, "");
        const links = document.querySelectorAll<HTMLElement>(".sidebar-link-a");

        links.forEach((link) => {
            const href = link.dataset.link?.replace(/\/$/, "");
            link.ariaCurrent = `${href === pathname}`;
        });
    };

    const beforeSwap = (e: TransitionBeforeSwapEvent) => {
        if (location.pathname.split("/")[1] != e.to.pathname.split("/")[1]) return;

        const scrollTop = getSidebar()?.scrollTop ?? 0;
        const sidebar = getSidebar(e.newDocument);
        if (sidebar) sidebar.dataset.scrolltop = scrollTop + "";
    };

    const afterSwap = () => {
        updateActiveLinks();

        const sidebar = getSidebar();
        if (sidebar) sidebar.scrollTop = parseInt(sidebar.dataset.scrolltop ?? "0");

        const currentLink = document.querySelector<HTMLElement>(".sidebar-link-a[aria-current='true']");
        const scrollable = currentLink?.closest(".drawer-scrollable");
        if (currentLink && scrollable) currentLink.scrollIntoView({ block: "nearest" });
    };

    document.addEventListener("astro:before-swap", beforeSwap);
    document.addEventListener("astro:after-swap", afterSwap);
    document.addEventListener("load", updateActiveLinks);
</script>
