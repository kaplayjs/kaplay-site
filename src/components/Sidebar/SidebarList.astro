---
import type { SidebarEntry, SidebarProps } from "./Sidebar.astro";
import SidebarFolder from "./SidebarFolder.astro";
import SidebarLink from "./SidebarLink.astro";

interface Props extends SidebarProps {
    sidebarEntries: SidebarEntry[];
}

const { sidebarEntries, sidebarMode } = Astro.props as Props;
const url = Astro.url;
---

<div data-sidebar-entries transition:persist={sidebarMode}>
    <div class="sticky -top-1 -mt-2 mb-2.5 pt-4 bg-base-300">
        <input
            id="sidebar-search"
            class="input h-auto min-h-0 px-3.5 py-2 border-base-content/5 w-full"
            placeholder={sidebarMode == "reference" ? "Search for API..." : "Search for Guides..."}
        />
    </div>

    {
        sidebarEntries.map(({ linkList, folder }) => {
            return (
                <SidebarFolder title={folder} id={folder} isOpen={linkList.length > 0}>
                    {linkList.map(({ title, link }) => (
                        <SidebarLink href={link} data-sidebar-entry data-title={title} data-url={link} current={link == url.pathname}>
                            {title}
                        </SidebarLink>
                    ))}
                </SidebarFolder>
            );
        })
    }
</div>

<script>
    document.addEventListener("astro:page-load", () => {
        const searchInput = document.querySelector<HTMLInputElement>("#sidebar-search");

        searchInput?.addEventListener("input", () => {
            const query = searchInput.value.toLowerCase().trim();
            const links = document.querySelectorAll("[data-sidebar-entry]");
            const folders = document.querySelectorAll("[data-sidebar-folder]");

            links.forEach((link) => {
                const title = link.getAttribute("data-title")?.toLowerCase() || "";
                const url = link.getAttribute("data-url")?.toLowerCase() || "";

                if (title.includes(query) || url.includes(query)) {
                    link.classList.remove("hidden");
                } else {
                    link.classList.add("hidden");
                }
            });

            folders.forEach((folder) => {
                const linksInFolder = folder.querySelectorAll("[data-sidebar-entry]:not(.hidden)");

                if (linksInFolder.length > 0) {
                    folder.classList.remove("hidden");
                } else {
                    folder.classList.add("hidden");
                }
            });
        });
    });
</script>
