---
import hamburgerIcon from "@/assets/hamburger.webp";
import { Image } from "astro:assets";
import type { MarkdownHeading } from "astro";
import { assets } from "@kaplayjs/crew";

interface Props {
    headings?: MarkdownHeading[];
}

const { headings } = Astro.props;
---

<nav class="fixed z-30 flex h-16 w-full items-center justify-between gap-4 bg-base-200 px-4 lg:pl-8 md:w-[calc(100%-18rem)] rounded-b-xl">
    <label for="sidebar" class="flex md:hidden">
        <figure>
            <Image src={hamburgerIcon} width="64" height="64" alt="hamburger icon" />
        </figure>
    </label>

    {
        headings && headings.length > 0 && (
            <select id="section-select" class="select select-sm max-w-40" onchange="window.location.href = this.value">
                {headings?.map((heading) => (
                    <option
                        value={`#${heading.slug}`}
                        class:list={[
                            {
                                "lg:text-xl lg:font-semibold": heading.depth === 1,
                                "lg:text-lg": heading.depth === 2,
                                "lg:text-base": heading.depth >= 3,
                            },
                        ]}
                    >
                        {heading.text}
                    </option>
                ))}
            </select>
        )
    }
    <div class="hidden md:block p-2 text-sm text-base-content">
        <img class="h-4 inline-block mr-1 align-text-bottom" alt="Heart" src={assets.heart.outlined} />
        KAPLAY is free and open source, <strong>forever</strong>. Help keep it alive,
        <a
            href="https://opencollective.com/kaplay/contribute/bean-rex-77456/checkout?interval=month&amount=10&contributeAs=me"
            target="_blank"
            class="link link-primary">donate $5</a
        >.
    </div>
</nav>

<script>
    const select = document.querySelector<HTMLSelectElement>("#section-select")!;
    const headers = document.querySelectorAll("h1[id], h2[id], h3[id], h4[id], h5[id], h6[id]")!;

    window.addEventListener("scroll", () => {
        let closest: Element | null = null;
        let minOffset = Infinity;

        headers.forEach((header) => {
            const rect = header.getBoundingClientRect();
            const offset = Math.abs(rect.top);

            if (rect.top <= 100 && offset < minOffset) {
                minOffset = offset;
                closest = header;
            }
        });

        if (closest) {
            // @ts-expect-error Wtf why here's never?
            select.value = `#${closest.id}`;
        }
    });
</script>
