---
import type { Locale } from "@/util/i18n.ts";
import { defaultMessages } from "./messages.ts";

type Props = {
    messages?: string[];
};

const l = Astro.currentLocale as Locale;

const { messages = defaultMessages[l] } = Astro.props;
---

<div class="messages flex flex-col sm:flex-row justify-center items-center gap-2 w-full max-w-6xl mx-auto mb-4 px-3 is-paused">
    {
        messages.map((message, i) => (
            <p
                class:list={[
                    "px-4 py-2 rounded-3xl shadow-2xl opacity-0",
                    i == messages.length - 1
                        ? "bg-primary text-black rounded-br-md origin-bottom-right"
                        : "bg-base-content/10 rounded-bl-md origin-bottom-left",
                ]}
                style={`animation-delay: ${0.65 * i + (i == messages.length - 1 ? 0.3 : 0)}s`}
                set:html={message.trim().replace(/\s+/g, " ")}
            />
        ))
    }
</div>

<script>
    document.addEventListener("astro:page-load", () => {
        document.querySelectorAll(".messages.is-paused").forEach((el) => {
            const observer = new IntersectionObserver(
                (entries) => {
                    entries.forEach((entry) => {
                        if (!entry.isIntersecting) return;

                        el.classList.remove("is-paused");
                        observer.disconnect();
                    });
                },
                {
                    rootMargin: "-30% 0% -30% 0%",
                    threshold: 0,
                },
            );

            observer.observe(el);

            el.addEventListener("click", () => el.classList.remove("is-paused"));
        });
    });
</script>

<style>
    .messages > * {
        animation: messageIn 0.4s forwards cubic-bezier(0.33, 1, 0.68, 1);
    }

    .is-paused > * {
        animation-play-state: paused;
    }

    @keyframes messageIn {
        0% {
            transform: scale(0);
            opacity: 0;
        }

        100% {
            transform: scale(1);
            opacity: 1;
        }
    }
</style>
